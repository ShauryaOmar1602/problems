class MyCircularQueue {
    int f=-1;
    int r=-1;
    int []que;

    public MyCircularQueue(int k) {
        que=new int[k];
        f=-1;
        r=-1;

        
    }
    
    public boolean enQueue(int value) {
        if(isFull())
        return false;
        else{
            r=(r+1)%que.length;
            que[r]=value;
            }
        if(f==-1)
        f=0;
        return true;
        
    }
    
    public boolean deQueue() {
        if(isEmpty())
        return false;
        else{
           int x=que[f];
           if(f==r){
            f=-1;
            r=-1;
           }
           else{
            f=(f+1)%que.length;
            }}
        return true;

        
    }
    public int Front() 
    {
        if(f!=-1){
        return que[f];
        }
        return -1;
    }
    
    public int Rear() {
        if(r!=-1){
        return que[r];
        }
        return -1;

        
    }
    
    public boolean isEmpty() {
        if(f==-1){
            return true;
        }
        return false;
    }
    
    public boolean isFull() {
        if((r+1)%que.length==f){
            return true;
        }
        return false;
        
    }
}
